{"version":3,"sources":["components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","components/BottomControls.jsx","App.js","reportWebVitals.js","index.js"],"names":["TD","styled","td","TDControls","Button","button","formatter","Intl","NumberFormat","style","currency","Coin","rank","name","ticker","price","market_cap","balance","showBalance","handleRefresh","tickerId","handleTransaction","format","action","method","className","onClick","event","preventDefault","Table","table","CoinList","props","coinData","slice","firstCoin","count","map","value","key","Section","section","BalanceToggleButton","Balance","div","AccountBalance","buttonText","formatedAmount","amount","balanceText","buttonClass","handleShowBalance","handleHellicopter","Header","header","H1","h1","Img","img","ExchangeHeader","src","logo","alt","Component","BottomControls","handlePrevPage","handleNextPage","handleLoadMoreCoins","formatPrice","parseFloat","Number","toFixed","App","useState","setBalance","setShwoBalance","setCoinData","coinCount","setCoinCount","setFirstCoin","componentDidMount","a","axios","get","coinsResponse","data","sort","b","coinPriceData","coin","id","symbol","quotes","USD","useEffect","length","console","log","changeValueTickerId","response","newPrice","newMarketCap","refreshedData","values","newValues","isBuy","valueChanged","Math","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAKMA,EAAKC,IAAOC,GAAV,8EAKFC,EAAaF,IAAOC,GAAV,8EAIVE,EAASH,IAAOI,OAAV,4FAMRC,EAAYC,KAAKC,aAAa,QAAS,CACvCC,MAAO,WACPC,SAAU,QA2CCC,EAxCF,SAAC,GAA+G,IAA9GC,EAA6G,EAA7GA,KAAMC,EAAuG,EAAvGA,KAAMC,EAAiG,EAAjGA,OAAQC,EAAyF,EAAzFA,MAAOC,EAAkF,EAAlFA,WAAYC,EAAsE,EAAtEA,QAASC,EAA6D,EAA7DA,YAAaC,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,kBAejG,OACI,+BACI,cAACrB,EAAD,UAAKY,IACL,cAACZ,EAAD,UAAKa,IACL,cAACb,EAAD,UAAKc,IACL,cAACd,EAAD,UAAKM,EAAUgB,OAAOP,KACtB,cAACf,EAAD,UAAKM,EAAUgB,OAAON,KACtB,cAAChB,EAAD,UAAKkB,EAAcZ,EAAUgB,OAAOL,GAAW,MAC/C,cAACd,EAAD,UACI,uBAAMoB,OAAO,IAAIC,OAAO,OAAxB,UACA,cAACpB,EAAD,CAAQqB,UAAW,eAAgBC,QAxBpB,SAACC,GACxBA,EAAMC,iBACNT,EAAcC,IAsBN,qBACA,cAAChB,EAAD,CAAQqB,UAAW,kBAAmBC,QArB3B,SAACC,GACpBA,EAAMC,iBAENP,GADc,EACWD,IAkBjB,iBACA,cAAChB,EAAD,CAAQqB,UAAW,iBAAkBC,QAjBzB,SAACC,GACrBA,EAAMC,iBAENP,GADc,EACWD,IAcjB,2BChDVS,EAAQ5B,IAAO6B,MAAV,gDAII,SAASC,EAAUC,GAChC,OACE,eAACH,EAAD,CAAOJ,UAAU,qCAAjB,UACE,gCACE,+BACE,mCACA,sCACA,wCACA,uCACA,4CACA,yCACA,6CAGJ,gCAEIO,EAAMC,SAASC,MAAMF,EAAMG,UAAWH,EAAMG,UAAYH,EAAMI,OAAOC,KAAI,SAAAC,GACrE,OAAO,cAAC,EAAD,CAEDnB,cAAiBa,EAAMb,cACvBE,kBAAqBW,EAAMX,kBAC3BT,KAAM0B,EAAM1B,KACZC,KAAMyB,EAAMzB,KACZC,OAAQwB,EAAMxB,OACdC,MAAOuB,EAAMvB,MACbC,WAAYsB,EAAMtB,WAClBC,QAASqB,EAAMrB,QACfC,YAAac,EAAMd,YACnBE,SAAUkB,EAAMC,KAVXD,EAAMC,IAAMD,EAAMC,IAAMD,EAAMxB,gBCtBvD,IAAM0B,EAAUvC,IAAOwC,QAAV,yJAQPrC,EAASH,IAAOI,OAAV,gDAINqC,EAAsBzC,YAAOG,EAAPH,CAAH,+CAInB0C,EAAU1C,IAAO2C,IAAV,qIAOTtC,EAAYC,KAAKC,aAAa,QAAS,CACvCC,MAAO,WACPC,SAAU,QAGC,SAASmC,EAAgBb,GACpC,IAAMc,EAAad,EAAMd,YAAc,eAAiB,eAClD6B,EAAiBzC,EAAUgB,OAAOU,EAAMgB,QAC1CC,EAAc,OACdjB,EAAMd,cACN+B,EAAcjB,EAAMd,YAAN,oBAAiC6B,GAAmB,IAEtE,IAAMG,EAAc,QAAUlB,EAAMd,YAAc,cAAgB,YAClE,OACI,qCACI,cAACyB,EAAD,UAAUM,IACV,eAACT,EAAD,WACI,cAACE,EAAD,CAAqBjB,UAAWyB,EAAaxB,QAASM,EAAMmB,kBAA5D,SAAgFL,IAChF,cAAC,EAAD,CAAQrB,UAAW,kBAAmBC,QAASM,EAAMoB,kBAArD,SACI,mBAAG3B,UAAU,8B,4CC9ClB,MAA0B,iCCInC4B,EAASpD,IAAOqD,OAAV,+MAUNC,EAAKtD,IAAOuD,GAAV,4IAQFC,EAAMxD,IAAOyD,IAAV,sEAKYC,E,4JACjB,WACI,OACI,eAACN,EAAD,WACI,cAACI,EAAD,CAAKG,IAAKC,EAAMC,IAAI,eACpB,cAACP,EAAD,mC,GAL4BQ,aCvBtCvB,EAAUvC,IAAOwC,QAAV,+GAME,SAASuB,EAAgBhC,GACpC,OACI,eAAC,EAAD,WACI,wBAAQN,QAASM,EAAMiC,eAAvB,2BACA,wBAAQvC,QAASM,EAAMkC,eAAvB,uBACA,wBAAQxC,QAASM,EAAMmC,oBAAvB,uBAHJ,WAIanC,EAAMG,UAAY,EAJ/B,OAIsCH,EAAMG,UAAYH,EAAMI,S,iCCAtE,SAASgC,EAAarD,GACpB,OAAOsD,WAAWC,OAAOvD,GAAOwD,QAAQ,IAG3B,SAASC,GAAKxC,GAE3B,MAA8ByC,mBAAS,KAAvC,mBAAOxD,EAAP,KAAgByD,EAAhB,KACA,EAAsCD,oBAAS,GAA/C,mBAAOvD,EAAP,KAAoByD,EAApB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOxC,EAAP,KAAiB2C,EAAjB,KACA,EAAkCH,mBAXT,IAWzB,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAkCL,mBAAS,GAA3C,mBAAOtC,EAAP,KAAkB4C,EAAlB,KAEMC,EAAiB,uCAAG,8BAAAC,EAAA,sEAEIC,IAAMC,IAAI,0CAFd,QAElBC,EAFkB,QAGVC,KAAKC,MAAK,SAAUL,EAAGM,GAAI,OAAON,EAAErE,KAAO2E,EAAE3E,QACvD4E,EAAgBJ,EAAcC,KAAKhD,KAAI,SAASoD,GAClD,MAAO,CACLlD,IAAKkD,EAAKC,GACV7E,KAAM4E,EAAK5E,KACXC,OAAQ2E,EAAKE,OACb1E,QAAS,EACTF,MAAOqD,EAAYqB,EAAKG,OAAOC,IAAI9E,OACnCC,WAAYoD,EAAYqB,EAAKG,OAAOC,IAAI7E,YACxCJ,KAAM6E,EAAK7E,SAGfgE,EAAYY,GAfY,2CAAH,qDAsBvBM,qBAAU,WACgB,IAApB7D,EAAS8D,OAEXf,IANFgB,QAAQC,IAAI,yBAcd,IAAM9E,EAAa,uCAAG,WAAO+E,GAAP,qBAAAjB,EAAA,sEAECC,IAAMC,IAlDb,0CAkD8Be,GAFxB,OAEhBC,EAFgB,OAGdC,EAAWhC,EAAY+B,EAASd,KAAKO,OAAOC,IAAI9E,OAChDsF,EAAejC,EAAY+B,EAASd,KAAKO,OAAOC,IAAI7E,YACtDsF,EAAgBrE,EAASI,KAAI,SAACkE,GAChC,IAAIC,EAAS,eAAOD,GAKpB,OAJIC,EAAUjE,MAAQ2D,IACpBM,EAAUzF,MAAQqF,EAClBI,EAAUxF,WAAaqF,GAElBG,KAET5B,EAAY0B,GAbQ,2CAAH,sDAgDnB,OACE,sBAAK7E,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAACoB,EAAD,CAAgBG,OAAQ/B,EAASC,YAAaA,EAAaiC,kBA9BrC,WAGxBwB,GADsBzD,IA4B6EkC,kBAxB3E,WAGxBsB,EADiBzD,EAAU,OAuBzB,cAACc,EAAD,CAAUE,SAAUA,EAAUE,UAAWA,EAAWC,MAAOyC,EAAW1D,cAAeA,EAAeE,kBApC9E,SAACoF,EAAOC,GAEhCV,QAAQC,IAAI,oBAAqBQ,EAAOC,IAkCoGxF,YAAaA,IACvJ,cAAC8C,EAAD,CAAgB5B,MAAOyC,EAAW1C,UAAWA,EAAWgC,oBApBhC,WAE1BW,EAAaD,EAlFU,KAoG6EX,eAV/E,WAErBa,EAAa5C,EAAY0C,IAQ2GZ,eAf/G,WAErBc,EAAa4B,KAAKC,IAAIzE,EAAY0C,EAAW,UCrGjD,IAYegC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.a5b1eb36.chunk.js","sourcesContent":["//import React, { Component } from 'react'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst TD = styled.td `\r\n    border: 1px solid #cccccc;\r\n    width: 16vw;\r\n`\r\n\r\nconst TDControls = styled.td `\r\n    border: 1px solid #cccccc;\r\n    width: 36vw;\r\n`\r\nconst Button = styled.button `\r\n    font-size: 11px;\r\n    width: 64px;\r\n    margin: 3px 5px 0;\r\n`\r\n\r\nvar formatter = Intl.NumberFormat('en-Us', {\r\n    style: 'currency',\r\n    currency: 'USD'\r\n});\r\n\r\nconst Coin = ({rank, name, ticker, price, market_cap, balance, showBalance, handleRefresh, tickerId, handleTransaction}) => {\r\n    const handleRefreshClick = (event) => {\r\n        event.preventDefault();\r\n        handleRefresh(tickerId);\r\n    }\r\n    const handleBuyClick = (event) => {\r\n        event.preventDefault();\r\n        const isBuy = true;\r\n        handleTransaction(isBuy, tickerId);\r\n    }\r\n    const handleSellClick = (event) => {\r\n        event.preventDefault();\r\n        const isBuy = false;\r\n        handleTransaction(isBuy, tickerId);\r\n    }\r\n    return (\r\n        <tr>\r\n            <TD>{rank}</TD>\r\n            <TD>{name}</TD>\r\n            <TD>{ticker}</TD>\r\n            <TD>{formatter.format(price)}</TD>\r\n            <TD>{formatter.format(market_cap)}</TD>\r\n            <TD>{showBalance ? formatter.format(balance) : '-'}</TD>\r\n            <TDControls>\r\n                <form action=\"#\" method=\"POST\">\r\n                <Button className={\"btn btn-info\"} onClick={handleRefreshClick}>Refresh</Button>\r\n                <Button className={\"btn btn-success\"} onClick={handleBuyClick}>Buy</Button>\r\n                <Button className={\"btn btn-danger\"} onClick={handleSellClick}>Sell</Button>\r\n                </form>\r\n            </TDControls>\r\n        </tr>\r\n    )\r\n};\r\n\r\nCoin.propTypes = {\r\n     name: PropTypes.string.isRequired,\r\n     ticker: PropTypes.string.isRequired,\r\n     price: PropTypes.number.isRequired,\r\n };\r\n\r\nexport default Coin;","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport Coin from '../Coin/Coin';\r\n\r\nconst Table = styled.table `\r\n  font-size: 1rem;\r\n`;\r\n\r\nexport default function CoinList (props) {\r\n  return (\r\n    <Table className=\"table table-primary table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Name</th>\r\n          <th>Ticker</th>\r\n          <th>Price</th>\r\n          <th>Market Cap</th>\r\n          <th>Balance</th>\r\n          <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          props.coinData.slice(props.firstCoin, props.firstCoin + props.count).map(value => {\r\n              return <Coin \r\n                    key={value.key ? value.key : value.ticker} \r\n                    handleRefresh = {props.handleRefresh} \r\n                    handleTransaction = {props.handleTransaction}\r\n                    rank={value.rank} \r\n                    name={value.name} \r\n                    ticker={value.ticker} \r\n                    price={value.price}\r\n                    market_cap={value.market_cap}\r\n                    balance={value.balance}\r\n                    showBalance={props.showBalance}\r\n                    tickerId={value.key}/>\r\n            }\r\n          )\r\n        \r\n        }\r\n      </tbody>\r\n    </Table>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section `\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    margin-bottom: 2rem;\r\n    line-height: 3rem;\r\n    display: inline-block;\r\n`;\r\n\r\nconst Button = styled.button `\r\n    margin: 0 8px;\r\n`;\r\n\r\nconst BalanceToggleButton = styled(Button)`\r\n    width: 150px;\r\n`;\r\n\r\nconst Balance = styled.div `\r\n   min-widht: 150px; \r\n   margin: 0.5rem 0 0 2.5rem;\r\n   font-size: 1.5rem;\r\n   vertical-align: middle;\r\n`\r\n\r\nvar formatter = Intl.NumberFormat('en-Us', {\r\n    style: 'currency',\r\n    currency: 'USD'\r\n});\r\n\r\nexport default function AccountBalance (props) {\r\n    const buttonText = props.showBalance ? \"Hide Balance\" : \"Show Balance\";\r\n    const formatedAmount = formatter.format(props.amount);\r\n    let balanceText = '\\u00A0';\r\n    if (props.showBalance) {\r\n        balanceText = props.showBalance ? `Balance = ${formatedAmount}` : \"\";\r\n    }\r\n    const buttonClass = 'btn ' + (props.showBalance ? 'btn-warning' : 'btn-info');\r\n    return (\r\n        <>\r\n            <Balance>{balanceText}</Balance>\r\n            <Section>\r\n                <BalanceToggleButton className={buttonClass} onClick={props.handleShowBalance}>{buttonText}</BalanceToggleButton>\r\n                <Button className={'btn btn-success'} onClick={props.handleHellicopter}>\r\n                    <i className=\"fas fa-helicopter\"></i>\r\n                </Button>\r\n            </Section>\r\n        </>\r\n    )\r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired,\r\n};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\r\nimport logo from './logo.svg';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.header `\r\n    background-color: #282c34;\r\n    min-height: 10vh;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n`;\r\n\r\nconst H1 = styled.h1 `\r\n    font-size: 3rem;\r\n    line-height: 8rem;\r\n    font-weight: bold;\r\n    min-width: 300px;\r\n    color: white;\r\n`;\r\n\r\nconst Img = styled.img `\r\n  height: 8rem;\r\n  pointer-events: none;\r\n`;\r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n            <Header>\r\n                <Img src={logo} alt=\"React logo\" />\r\n                <H1>\r\n                    Coin Exchange\r\n                </H1>\r\n            </Header>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section `\r\n    font-size: 1rem;\r\n    text-align: left;\r\n    padding: 0.5rem 0 0.5rem 0.5rem;\r\n`;\r\n\r\nexport default function BottomControls (props) {\r\n    return (\r\n        <Section>\r\n            <button onClick={props.handlePrevPage}>Previous Page</button>\r\n            <button onClick={props.handleNextPage}>Next Page</button>\r\n            <button onClick={props.handleLoadMoreCoins}>Load More</button>\r\n            showing {props.firstCoin + 1} to {props.firstCoin + props.count}\r\n        </Section>\r\n    )\r\n}\r\n\r\nBottomControls.propTypes = {\r\n    count: PropTypes.number.isRequired,\r\n};","import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport CoinList from './components/CoinList/CoinList';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\nimport BottomControls from './components/BottomControls';\nimport axios from 'axios';\n//import {v4 as uuidv4} from 'uuid';\n\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/js/all';\n\nconst tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\nconst INITIAL_COIN_COUNT = 10;\n\nfunction formatPrice (price) {\n  return parseFloat(Number(price).toFixed(2));\n}\n\nexport default function App (props) {\n\n  const [balance, setBalance] = useState(1000);\n  const [showBalance, setShwoBalance] = useState(false);\n  const [coinData, setCoinData] = useState([]);\n  const [coinCount, setCoinCount] = useState(INITIAL_COIN_COUNT);\n  const [firstCoin, setFirstCoin] = useState(0);\n  \n  const componentDidMount = async () => {\n    //console.log(\"componentDidMount\");\n    const coinsResponse = await axios.get('https://api.coinpaprika.com/v1/tickers');\n    coinsResponse.data.sort(function (a, b) {return a.rank - b.rank;});\n    let coinPriceData = coinsResponse.data.map(function(coin) {\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n        market_cap: formatPrice(coin.quotes.USD.market_cap),\n        rank: coin.rank\n      };\n    })\n    setCoinData(coinPriceData);\n  }\n\n  const componentDidUpdate = () => {\n    console.log(\"componentDidUpdate\");\n  }\n\n  useEffect(function() {\n    if (coinData.length === 0) {\n      //component did mount\n      componentDidMount();\n    }\n    else {\n      // component update\n      componentDidUpdate();\n    }\n  })\n\n  const handleRefresh = async (changeValueTickerId) =>\n  {\n    let response = await axios.get( tickerUrl + changeValueTickerId);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newMarketCap = formatPrice(response.data.quotes.USD.market_cap);\n    let refreshedData = coinData.map((values) => {\n      let newValues = {...values};\n      if (newValues.key === changeValueTickerId) {\n        newValues.price = newPrice;\n        newValues.market_cap = newMarketCap;\n      }\n      return newValues;\n    })\n    setCoinData(refreshedData);\n  }\n\n  const handleTransaction = (isBuy, valueChanged) =>\n  {\n    console.log(\"handleTransaction\", isBuy, valueChanged);\n  }\n\n  const handleShowBalance = () =>\n  {\n    let newShowBalance = !showBalance;\n    setShwoBalance(newShowBalance);\n  }\n\n  const handleHellicopter = () =>\n  {\n    let newBalance = balance + 10;\n    setBalance(newBalance);\n  }\n\n  const handleLoadMoreCoins = () =>\n  {\n    setCoinCount(coinCount + INITIAL_COIN_COUNT);\n  }\n\n  const handlePrevPage = () =>\n  {\n    setFirstCoin(Math.max(firstCoin - coinCount, 0));\n  }\n\n  const handleNextPage = () =>\n  {\n    setFirstCoin(firstCoin + coinCount);\n  }\n\n  return (\n    <div className=\"App\">\n      <ExchangeHeader/>\n      <AccountBalance amount={balance} showBalance={showBalance} handleShowBalance={handleShowBalance} handleHellicopter={handleHellicopter}/>\n      <CoinList coinData={coinData} firstCoin={firstCoin} count={coinCount} handleRefresh={handleRefresh} handleTransaction={handleTransaction} showBalance={showBalance} />\n      <BottomControls count={coinCount} firstCoin={firstCoin} handleLoadMoreCoins={handleLoadMoreCoins} handleNextPage={handleNextPage} handlePrevPage={handlePrevPage}/>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}