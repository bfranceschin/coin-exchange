{"version":3,"sources":["components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["CoinRow","styled","tr","Coin","name","ticker","price","balance","showBalance","handleRefresh","tickerId","action","method","onClick","event","preventDefault","Table","table","CoinList","props","coinData","map","value","key","Section","section","AccountBalance","buttonText","balanceText","amount","handleShowBalance","Header","header","H1","h1","Img","img","ExchangeHeader","src","logo","alt","Component","tickerUrl","formatPrice","parseFloat","Number","toFixed","App","useState","setShwoBalance","setCoinData","componentDidMount","a","console","log","axios","get","coinsResponse","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","response","symbol","quotes","USD","useEffect","length","changeValueTickerId","newPrice","refreshedData","values","newValues","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.897398a6.chunk.js","sourcesContent":["//import React, { Component } from 'react'\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst CoinRow = styled.tr `\r\n    td {\r\n        border: 1px solid #cccccc;\r\n        width: 25vh;\r\n    }\r\n`;\r\n\r\n// export default class Coin extends Component {\r\n//     handleClick = (event) => {\r\n//         event.preventDefault();\r\n//         this.props.handleRefresh(this.props.tickerId);\r\n//     }\r\n    \r\n//     render() {\r\n//         let name = <td>{this.props.name}</td>;\r\n//         let ticker = <td>{this.props.ticker}</td>;\r\n//         let price = <td>{this.props.price}</td>;\r\n//         let balance = <td>{this.props.balance}</td>;\r\n//         let button = <td>\r\n//                           <form action=\"#\" method=\"POST\">\r\n//                           <button onClick={this.handleClick}>Refresh</button>\r\n//                           </form>\r\n//                       </td>\r\n\r\n//         return (\r\n//                 <CoinRow>\r\n//                     {name}\r\n//                     {ticker}\r\n//                     {price}\r\n//                     {this.props.showBalance ? balance : null}\r\n//                     {button}\r\n//                 </CoinRow>\r\n//             )\r\n        \r\n        \r\n//     }\r\n// }\r\n\r\nconst Coin = ({name, ticker, price, balance, showBalance, handleRefresh, tickerId}) => {\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        handleRefresh(tickerId);\r\n    }\r\n    return (\r\n        <CoinRow>\r\n            <td>{name}</td>\r\n            <td>{ticker}</td>\r\n            <td>{price}</td>\r\n            {showBalance ? <td>{balance}</td> : null}\r\n            <td>\r\n                <form action=\"#\" method=\"POST\">\r\n                <button onClick={handleClick}>Refresh</button>\r\n                </form>\r\n            </td>\r\n        </CoinRow>\r\n    )\r\n};\r\n\r\nCoin.propTypes = {\r\n     name: PropTypes.string.isRequired,\r\n     ticker: PropTypes.string.isRequired,\r\n     price: PropTypes.number.isRequired,\r\n };\r\n\r\nexport default Coin;","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport Coin from '../Coin/Coin';\r\n\r\nconst Table = styled.table `\r\n  margin: 50px auto 50px auto;\r\n  display: inline-block;\r\n  font-size: 1.4rem;\r\n`;\r\n\r\nexport default function CoinList (props) {\r\n  return (\r\n    <Table>\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Ticker</th>\r\n          <th>Price</th>\r\n          {props.showBalance ? <th>Balance</th> : null}\r\n          <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          props.coinData.map(value => {\r\n              return <Coin \r\n                    key={value.key ? value.key : value.ticker} \r\n                    handleRefresh = {props.handleRefresh} \r\n                    name={value.name} \r\n                    ticker={value.ticker} \r\n                    price={value.price}\r\n                    balance={value.balance}\r\n                    showBalance={props.showBalance}\r\n                    tickerId={value.key}/>\r\n            }\r\n          )\r\n        \r\n        }\r\n      </tbody>\r\n    </Table>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section `\r\n    border: 1px solid red;\r\n    font-size: 2rem;\r\n    text-align: left;\r\n    padding: 1.5rem 0 1.5rem 5rem;\r\n`;\r\n\r\nexport default function AccountBalance (props) {\r\n    const buttonText = props.showBalance ? \"Hide Balance\" : \"Show Balance\";\r\n    const balanceText = props.showBalance ? `Balance = ${props.amount}` : \"\";\r\n    return (\r\n        <Section>\r\n            {/* Balance = ${props.amount}   */}\r\n            {balanceText}\r\n            <button onClick={props.handleShowBalance}>{buttonText}</button>\r\n        </Section>\r\n    )\r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired,\r\n};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\r\nimport logo from './logo.svg';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.header `\r\n    background-color: #282c34;\r\n    min-height: 20vh;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n`;\r\n\r\nconst H1 = styled.h1 `\r\n    font-size: 4rem;\r\n    color: white;\r\n`;\r\n\r\nconst Img = styled.img `\r\n  height: 8rem;\r\n  pointer-events: none;\r\n`;\r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n            <Header>\r\n                <Img src={logo} alt=\"React logo\" />\r\n                <H1>\r\n                    Coin Exchange\r\n                </H1>\r\n            </Header>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport CoinList from './components/CoinList/CoinList';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\nimport axios from 'axios';\n//import {v4 as uuidv4} from 'uuid';\n\nconst tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\nconst COIN_COUNT = 10;\n\nfunction formatPrice (price) {\n  return parseFloat(Number(price).toFixed(2));\n}\n\nexport default function App (props) {\n  // state = {\n  //   balance: 10000,\n  //   coinData: [\n  //     // {name: \"Bitcoin\",      ticker: \"BTC\",  price: 60000, balance: 0.5},\n  //     // {name: \"Ethereum\",     ticker: \"ETH\",  price: 5000, balance: 4.5},\n  //     // {name: \"Tether\",       ticker: \"USDT\", price: 1.000, balance: 1000},\n  //     // {name: \"Ripple\",       ticker: \"XRP\",  price: 0.2, balance: 0},\n  //     // {name: \"Bitcoin Cash\", ticker: \"BCH\",  price: 612.0, balance: 0},\n  //   ],\n  //   showBalance: false,\n  // }\n\n  const [balance, setBalance] = useState(1000);\n  const [showBalance, setShwoBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  \n  \n  const componentDidMount = async () => {\n    console.log(\"componentDidMount\");\n    const coinsResponse = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = coinsResponse.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const promises = coinIds.map(id => axios.get( tickerUrl + id));\n    let coinData = await Promise.all(promises);\n    let coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n      };\n    })\n\n    //console.log(coinData);\n    \n    //this.setState({coinData: coinPriceData});\n    setCoinData(coinPriceData);\n  }\n\n  const componentDidUpdate = () => {\n    console.log(\"componentDidUpdate\");\n  }\n\n  useEffect(function() {\n    if (coinData.length === 0) {\n      //component did mount\n      componentDidMount();\n    }\n    else {\n      // component update\n      componentDidUpdate();\n    }\n  })\n\n  const handleRefresh = async (changeValueTickerId) =>\n  {\n    let response = await axios.get( tickerUrl + changeValueTickerId);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    let refreshedData = coinData.map((values) => {\n      let newValues = {...values};\n      if (newValues.key === changeValueTickerId) {\n        newValues.price = newPrice;\n      }\n      return newValues;\n    })\n    setCoinData(refreshedData);\n  }\n\n  const handleShowBalance = () =>\n  {\n    let newShowBalance = !showBalance;\n    setShwoBalance(newShowBalance);\n  }\n\n  return (\n    <div className=\"App\">\n      <ExchangeHeader/>\n      <AccountBalance amount={balance} showBalance={showBalance} handleShowBalance={handleShowBalance}/>\n      <CoinList coinData={coinData} handleRefresh={handleRefresh} showBalance={showBalance} />\n    </div>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}